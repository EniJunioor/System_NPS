const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

async function testTokenIntegration() {
  console.log('üß™ Testando integra√ß√£o da API de tokens...\n');

  try {
    // 1. Testar gera√ß√£o de token (sem autentica√ß√£o - deve falhar)
    console.log('1. Testando gera√ß√£o de token sem autentica√ß√£o...');
    try {
      await axios.post(`${API_BASE_URL}/tokens`, {
        telefone: '(11) 99999-9999',
        atendente: 'Jo√£o Silva',
        dataAtendimento: new Date().toISOString()
      });
      console.log('‚ùå ERRO: Token foi gerado sem autentica√ß√£o');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ CORRETO: Token n√£o foi gerado sem autentica√ß√£o');
      } else {
        console.log('‚ö†Ô∏è  AVISO: Erro inesperado:', error.response?.status);
      }
    }

    // 2. Testar valida√ß√£o de token inexistente
    console.log('\n2. Testando valida√ß√£o de token inexistente...');
    try {
      await axios.get(`${API_BASE_URL}/tokens/token-inexistente`);
      console.log('‚ùå ERRO: Token inexistente foi validado');
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ CORRETO: Token inexistente foi rejeitado');
      } else {
        console.log('‚ö†Ô∏è  AVISO: Erro inesperado:', error.response?.status);
      }
    }

    // 3. Testar estrutura da resposta de erro
    console.log('\n3. Testando estrutura da resposta de erro...');
    try {
      await axios.get(`${API_BASE_URL}/tokens/token-inexistente`);
    } catch (error) {
      if (error.response?.data?.error) {
        console.log('‚úÖ CORRETO: Resposta de erro tem estrutura adequada');
        console.log(`   Mensagem: ${error.response.data.error}`);
      } else {
        console.log('‚ùå ERRO: Resposta de erro n√£o tem estrutura adequada');
      }
    }

    console.log('\nüéâ Testes de integra√ß√£o conclu√≠dos!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Configure o banco de dados PostgreSQL');
    console.log('2. Execute as migra√ß√µes: npx prisma migrate dev');
    console.log('3. Inicie o servidor: npm start');
    console.log('4. Teste a gera√ß√£o de tokens com autentica√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes se o servidor estiver rodando
testTokenIntegration().catch(console.error); 